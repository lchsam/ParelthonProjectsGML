<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_purp_check</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_check_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup variables

//Default to -1 
//Id is given by obj_crit_controller
checkbox_id = -1;

//Freeze animation to first frame
image_speed = 0;

//Set up frame duration
frame_duration = 0.0167; // 1/60th of a second

is_checked = false;
is_tapped = false;

cir_radius = 0;
cir_max_radius = 70;
cir_alpha = 0.7;
time_sec = 0;
max_sec = 0.45;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increment frame when needed
var tap_meet = position_meeting(mouse_x, mouse_y, id);

//Check for tap/click
if (tap_meet &amp;&amp; device_mouse_check_button_released(0, mb_left)) {
    is_checked = !is_checked;
    is_tapped = true;
}

//Check for tap hold
var tap_hold = tap_meet &amp;&amp; device_mouse_check_button(0, mb_left)
if (tap_hold &amp;&amp; !is_checked){
    image_index = 1;
}

if (tap_hold &amp;&amp; is_checked) {
    image_index = 0;
}

if (tap_hold) {
    exit;
}


//if tapped, animate growing circle in background
if (is_tapped) {
    time_sec += global.seconds_passed;
    cir_radius = scr_ease_out_cubic(time_sec, 0, cir_max_radius, max_sec);
    cir_alpha = scr_linear_tween(time_sec, 0.7, -0.7, max_sec);
    //Prevent overshoot in values
    cir_radius = min(cir_radius, cir_max_radius);
    cir_alpha = max(cir_alpha, 0);
}

//Once max values of circle is reached, stop animation and reset
if (cir_radius == cir_max_radius &amp;&amp; cir_alpha == 0) {
    is_tapped = false;
    cir_radius = 0;
    cir_alpha = 0.7;
    time_sec = 0;
}


//if at zeroth frame, stop.
if (!is_checked &amp;&amp; image_index &lt;= 0) {
    exit;
}

var frame_to_increment = global.seconds_passed/frame_duration

//if it's turned off for check, animate backwards
if (!is_checked) {
    image_index = clamp(image_index - frame_to_increment, 0, 29);
    exit;
}

// freeze frame if frame is maxed
if (is_checked &amp;&amp; image_index &gt;= 29) {
    exit;
}
//if it's pressed, animate the check
if (is_checked) {
    image_index = clamp(image_index + frame_to_increment, 0, 29);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self and circle if necessary

if (is_tapped) {
    scr_draw_col_alph(c_ltgray, cir_alpha);
    draw_circle(x + 41, y + 47, cir_radius, false);
}


draw_self();

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
