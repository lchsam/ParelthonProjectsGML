<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set hover variable and mask

hovered = false;
standby = false;
standby_wait = false;

enter_index = 0;
standby_index = 0;

alpha = 1;
clicked = false;

// These values will be reassigned by obj_cursor_driver
// in collision.
previous_mouse_x = 0;
previous_mouse_y = 0;

// A neat way of letting child change 
// Parent variables
// So that parent has modified variables.
name = "Untitled";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm for standby animation
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for mouse hover and other logic
//Makes me wonder if folders should contain the logic
//Maybe I should create a cursor driver or something.

alpha = 1;

if (!global.selectable){
    exit;
}

// Folder Collision
if (!place_meeting(x, y, obj_selectable)) {
    folder_collide = false;
}


//Check Cursor leave
if (hovered &amp;&amp; !position_meeting(mouse_x,mouse_y,id)){
    hovered = false;
    standby_wait = false
    standby = false;
    enter_index = 0;
    standby_index = 0;
}


// Sprite Animation: Selection Enter
transition_not_done = hovered &amp;&amp; sprite_get_number(spr_selection_enter) - 1 != enter_index;
if (transition_not_done) {
    enter_index += 1;
}

if (!transition_not_done &amp;&amp; !standby_wait) {
    alarm[0] = room_speed * 2;
    standby_wait = true;
}

if (alarm[0] = 0){
    standby = true;
    standby_wait = false;
}

// Sprite Animation: Selection Standby
transition_not_done = standby &amp;&amp; sprite_get_number(spr_selection_standby) - 1 != standby_index;
if (transition_not_done) {
    standby_index += 1;
}

// double check
if (transition_not_done &amp;&amp; !position_meeting(mouse_x, mouse_y, id)) {
    hovered = false;
    standby_wait = false
    standby = false;
    enter_index = 0;
    standby_index = 0;
}

if (!transition_not_done &amp;&amp; !standby_wait) {
    alarm[0] = room_speed * 2;
    standby_wait = true;
    standby_index = 0;
}

// Folder Collision

var folder;
folder = instance_place(x, y, obj_selectable);
if folder != noone &amp;&amp; clicked{
    with (folder) {
        hovered = true;
    }
}

// mouse click and drag logic
if (clicked &amp;&amp; mouse_check_button(mb_left)){
    hovered = false;
    standby_wait = false
    standby = false;
    enter_index = 0;
    standby_index = 0;
    depth = -5
    
    alpha = 0.7;
    
    delta_x = obj_cursor_driver.xprevious - mouse_x;
    delta_y = obj_cursor_driver.yprevious - mouse_y;
    
    x -= delta_x;
    y -= delta_y;
    
    x = clamp(x, 0, room_width);
    y = clamp(y, 0, room_height);
} else {
    clicked = false;
    depth = 0;
}








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw selection

//Asumption:
//Using image_index for subimg will not work because this object's sprite is static.




if (hovered &amp;&amp; !standby){
    draw_sprite_ext(spr_selection_enter, enter_index, x, y, image_xscale, image_yscale, 0, c_white, 1);
}

if (standby) {
    draw_sprite_ext(spr_selection_standby, standby_index, x, y, image_xscale, image_yscale, 0, c_white, 1);
}

draw_set_colour(c_white);
draw_set_alpha(1);
draw_set_font(fnt_pixel);
draw_set_halign(fa_center);

var mask_height = sprite_get_bbox_bottom(spr_selection_standby) + 1 - sprite_get_bbox_top(spr_selection_standby);
draw_text_ext(x, y  + (mask_height/2) * image_yscale + 5, name, 3, 300);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
