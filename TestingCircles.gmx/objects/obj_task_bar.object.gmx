<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

//Bar animation variables
bar_appear = false
current_frame_bar = 0;
max_frame_bar = 22;

bird_icon_x = room_width/2;
bird_icon_y = -32;

//Bird hover animation
hover_bird = false;
current_frame_bird_select = 0
max_frame_bird_select = 15

//Bird clicked animation
original_pos_bird = true;
bird_clicked = false;
animation_finished = true;
current_frame_bird_clicked = 0;
max_frame_bird_clicked = 20;

//Feather icon simple animation
//Feather shows the OS description
//With model, logo, and version
feather_icon_x = 60;
feather_icon_y = 32;
feather_current_frame = 0;
feather_max_frame = 20;
feather_alpha = 0;
feather_hover_frame = 0;
feather_hover_max_frame = 15;


//Info icon simple animation
/*Info icon shows a left side bar that
slides into view while pushing the menu icons
to the right
It shows the description of apps
Cool animation when info appears
*/
info_icon_x = room_width/2;
info_icon_y = 32;
info_alpha = 0;
info_current_frame = 0;
info_max_frame = 20;
info_hover_frame = 0;
info_hover_max_frame = 15;

//Blur instance
inst_blur = "nothing";

//menu items
inst_calculator = "nothing";
inst_triangle = "nothing";

display_reset(4, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for cursor and toggle task bar

//Bar appearing
var in_region = point_in_rectangle(mouse_x, mouse_y, 0, 0, room_width, 64);
if (in_region) {
    bar_appear = true;
}

if (!in_region) {
    bar_appear = false;
}

if (bar_appear || !original_pos_bird || !animation_finished) {
    current_frame_bar = clamp(current_frame_bar + 1, 0, max_frame_bar);
}

if (!bar_appear) {
    current_frame_bar = clamp(current_frame_bar - 1, 0, max_frame_bar);
}

//Bird circle appear
var bird_icon_width = sprite_get_width(spr_bird_icon);
var bird_icon_height = sprite_get_height(spr_bird_icon);

hover_bird = point_in_rectangle(mouse_x, mouse_y, bird_icon_x - bird_icon_width * 3/2,
    bird_icon_y - (bird_icon_height* 3/2), bird_icon_x + bird_icon_width * 3/2,
    bird_icon_y + (bird_icon_height* 3/2));
    
if (hover_bird) {
    current_frame_bird_select = clamp(current_frame_bird_select + 1, 0, max_frame_bird_select);
}

if (!hover_bird) {
    current_frame_bird_select = clamp(current_frame_bird_select - 1, 0, max_frame_bird_select);
}

//Bird clicked

if (current_frame_bird_clicked == max_frame_bird_clicked){
    bird_clicked = false;
    animation_finished = true;
    original_pos_bird = false;
}

if (mouse_check_button_pressed(mb_left) &amp;&amp; hover_bird &amp;&amp; animation_finished){
    bird_clicked = true;
    
    //Prevents reactive hovering on items 
    global.selectable = false;
    
    if (original_pos_bird) {
        inst_blur = instance_create(96, 32, obj_gaussian_shdr);
        
        // I need to figure out a better way to organize the icons.
        inst_calculator = instance_create(room_width/2 - 70 - 32 * 2, 65 + 32 * 2 + 75, obj_calculator);
        
        inst_triangle = instance_create(room_width/2 + 70 + 32 * 2, 65 + 32 * 2 + 75, obj_triangle);
        
    }
}

if (bird_clicked &amp;&amp; original_pos_bird) {
    current_frame_bird_clicked = clamp(current_frame_bird_clicked + 1, 0, max_frame_bird_clicked);
    animation_finished = false;
    
    //Animate feather movement
    feather_current_frame = clamp(feather_current_frame + 1, 0, feather_max_frame);
    
    //Animate info icon movement
    info_current_frame = clamp(info_current_frame + 1, 0, info_max_frame);
    
    //Change blur variables
    with (inst_blur) {
        current_frame = clamp(current_frame + 1, 0, max_frame); 
        
        if (current_frame != max_frame) {
            radius = ease_out_cubic(current_frame, 0, max_radius, max_frame);
            alpha = linear_tween(current_frame, 0, 0.3, max_frame);
        }
    }
}

if (bird_clicked &amp;&amp; !original_pos_bird){
    current_frame_bird_clicked = clamp(current_frame_bird_clicked - 1, 0, max_frame_bird_clicked);
    
    //Animate feather movement
    feather_current_frame = clamp(feather_current_frame - 1, 0, feather_max_frame);
    
    //Animate info icon movement
    info_current_frame = clamp(info_current_frame - 1, 0, info_max_frame);
    
    //Change Blur variables
    with (inst_blur) {
        current_frame = clamp(current_frame - 1, 0, max_frame); 
        
        if (current_frame != 0) {
            radius = ease_in_cubic(max_frame - current_frame, max_radius, -max_radius, max_frame);
            alpha = linear_tween(current_frame, 0, 0.3, max_frame);
        }
        
        if (current_frame == 0) {
            instance_destroy()
        }
    }
    
    with (inst_calculator) {
        appear = false;
        
        if (current_frame == 0){
            instance_destroy();
        }
    }
    
    with (inst_triangle) {
        appear = false;
        
        if (current_frame == 0) {
            instance_destroy();
        }
    }
}

//Taskbar icons
if (!original_pos_bird) {
//Welp nested ifs
    //Animate feather hover and info hover
    var feather_hover = point_in_rectangle(mouse_x, mouse_y, feather_icon_x - (16 * 3/2), 
        feather_icon_y - (16 * 3/2), feather_icon_x + (16 * 3/2), feather_icon_y + (16 * 3/2));
    
    var info_hover = point_in_rectangle(mouse_x, mouse_y, info_icon_x - (16 * 3/2), 
    info_icon_y - (16 * 3/2), info_icon_x + (16 * 3/2), info_icon_y + (16 * 3/2));
        
    if (feather_hover){
        feather_hover_frame = clamp(feather_hover_frame + 1, 0, feather_hover_max_frame);
    }
    
    if (info_hover) {
        info_hover_frame = clamp(info_hover_frame + 1, 0, info_hover_max_frame);
    }
    
    if (!feather_hover){
        feather_hover_frame = clamp(feather_hover_frame - 1, 0, feather_hover_max_frame);
    }
    
    if (!info_hover) {
        info_hover_frame = clamp(info_hover_frame - 1, 0, info_hover_max_frame);
    }
}



//Reset
if (current_frame_bird_clicked == 0){
    original_pos_bird = true;
    bird_clicked = false;
    animation_finished = true;
    global.selectable = true;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw task bar

bird_icon_y =  ease_out_cubic(current_frame_bar, -32, 64, max_frame_bar);
bird_icon_x = ease_out_cubic(current_frame_bird_clicked, room_width/2, (room_width - 40) - room_width/2, max_frame_bird_clicked);
var rect_y2 = ease_out_cubic(current_frame_bar, 0, 64, max_frame_bar);
var alpha = ease_out_expo(current_frame_bar, 0, 1, max_frame_bar);
var bird_cir_radius = ease_out_cubic(current_frame_bird_select, 0, 30, max_frame_bird_select);

feather_icon_x = ease_out_cubic(feather_current_frame, room_width/2, -room_width/2 + 40, feather_max_frame);
feather_alpha = linear_tween(feather_current_frame, 0, 1, feather_max_frame);
info_alpha = ease_in_cubic(info_current_frame, 0, 1, info_max_frame);


if (!original_pos_bird) {
    var feather_radius = ease_out_cubic(feather_hover_frame, 0, 30, feather_hover_max_frame);
    var info_radius = ease_out_cubic(info_hover_frame, 0, 30, info_hover_max_frame);
}



if (!original_pos_bird) {
    var new_current_frame_bird = max_frame_bird_clicked - current_frame_bird_clicked;
    bird_icon_x = ease_out_cubic(new_current_frame_bird, (room_width - 40) - room_width/2 + room_width/2,
     -((room_width - 40) - room_width/2), max_frame_bird_clicked);
}


if (hover_bird) {
    alpha = 0.7
}



draw_set_circle_precision(64);
draw_set_alpha(1);
draw_set_colour(make_colour_rgb(137, 182, 255));
draw_rectangle(0, 0, room_width, rect_y2, false);

draw_set_colour(c_white);
draw_circle(bird_icon_x - 2, bird_icon_y, bird_cir_radius, false); 
draw_sprite_ext(spr_bird_icon, 0, bird_icon_x, bird_icon_y, 3, 3, 0, c_white, alpha);

if (!original_pos_bird) {
    draw_circle(feather_icon_x - 4, feather_icon_y, feather_radius, false);
}

if (feather_current_frame != 0) {
    draw_sprite_ext(spr_feather_icon, 0, feather_icon_x, feather_icon_y, 3, 3, 0, c_white, feather_alpha);
}

if (!original_pos_bird) {
    draw_circle(info_icon_x - 2, info_icon_y, info_radius, false);
}

if (info_current_frame != 0) {
    draw_sprite_ext(spr_info_icon, 0, info_icon_x, info_icon_y, 3, 3, 0, c_white, info_alpha);
}



draw_set_colour(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
